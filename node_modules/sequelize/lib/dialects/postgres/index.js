'use strict';

var _ = require('lodash')
  , Abstract = require('../abstract')
  , ConnectionManager = require('./connection-manager')
  , Query = require('./query')
  , QueryGenerator = require('./query-generator')
<<<<<<< HEAD
  , DataTypes = require('../../data-types').postgres;
=======
  , DataTypes = require('./data-types');
>>>>>>> e38eb0b10e6a05a1b0f1ab681516ea4290ca9722

var PostgresDialect = function(sequelize) {
  this.sequelize = sequelize;
  this.connectionManager = new ConnectionManager(this, sequelize);
  this.connectionManager.initPools();

<<<<<<< HEAD
=======
  // parseDialectSpecificFields needs access to the pg lib in order to use its array parser. We cannot simply require pg in query.js since the user can specify another library path (such as pg-native etc)
  Query.prototype.parseDialectSpecificFields.lib = this.connectionManager.lib;

>>>>>>> e38eb0b10e6a05a1b0f1ab681516ea4290ca9722
  this.QueryGenerator = _.extend({}, QueryGenerator, {
    options: sequelize.options,
    _dialect: this,
    sequelize: sequelize
  });
};

PostgresDialect.prototype.supports = _.merge(_.cloneDeep(Abstract.prototype.supports), {
  'DEFAULT VALUES': true,
  'EXCEPTION': true,
  'ON DUPLICATE KEY': false,
  'ORDER NULLS': true,
  returnValues: {
    returning: true
  },
<<<<<<< HEAD
  bulkDefault: true,
=======
>>>>>>> e38eb0b10e6a05a1b0f1ab681516ea4290ca9722
  schemas: true,
  lock: true,
  lockOf: true,
  lockKey: true,
  lockOuterJoinFailure: true,
  forShare: 'FOR SHARE',
  index: {
    concurrently: true,
    using: 2,
    where: true
  },
  NUMERIC: true,
  ARRAY: true,
  GEOMETRY: true,
  JSON: true,
  JSONB: true,
<<<<<<< HEAD
  deferrableConstraints: true,
  searchPath : true
});

ConnectionManager.prototype.defaultVersion = '9.4.0';
=======
  deferrableConstraints: true
});

>>>>>>> e38eb0b10e6a05a1b0f1ab681516ea4290ca9722
PostgresDialect.prototype.Query = Query;
PostgresDialect.prototype.DataTypes = DataTypes;
PostgresDialect.prototype.name = 'postgres';
PostgresDialect.prototype.TICK_CHAR = '"';
PostgresDialect.prototype.TICK_CHAR_LEFT = PostgresDialect.prototype.TICK_CHAR;
PostgresDialect.prototype.TICK_CHAR_RIGHT = PostgresDialect.prototype.TICK_CHAR;

module.exports = PostgresDialect;
